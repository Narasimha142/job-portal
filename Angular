// Full Job Portal Project (Angular + Spring Boot)

// 1. Backend (Spring Boot - job-portal-backend)
// -------------------------------------------

// Create a Spring Boot application with dependencies:
// - Spring Web
// - Spring Data JPA
// - MySQL Driver
// - Spring Security (for authentication)

// Job Entity (Job.java)
@Entity
public class Job {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private String company;
    private String location;
    private String description;
    // Getters and Setters
}

// Job Repository (JobRepository.java)
@Repository
public interface JobRepository extends JpaRepository<Job, Long> {}

// Job Service (JobService.java)
@Service
public class JobService {
    @Autowired
    private JobRepository jobRepository;
    public List<Job> getAllJobs() { return jobRepository.findAll(); }
}

// Job Controller (JobController.java)
@RestController
@RequestMapping("/api/jobs")
@CrossOrigin("*")
public class JobController {
    @Autowired
    private JobService jobService;
    @GetMapping
    public List<Job> getJobs() { return jobService.getAllJobs(); }
}

// Application Properties (application.properties)
spring.datasource.url=jdbc:mysql://localhost:3306/jobportal
spring.datasource.username=root
spring.datasource.password=
spring.jpa.hibernate.ddl-auto=update

// Run the Spring Boot application


// 2. Frontend (Angular - job-portal-frontend)
// -------------------------------------------

// Install Angular CLI if not installed
// npm install -g @angular/cli

// Create a new Angular project
// ng new job-portal --routing=true --style=css

// Navigate to the project
// cd job-portal

// Install Bootstrap for styling
// npm install bootstrap

// Import Bootstrap in angular.json:
// "styles": [
//   "src/styles.css",
//   "node_modules/bootstrap/dist/css/bootstrap.min.css"
// ]

// Generate components
// ng generate component components/job-listing
// ng generate component components/job-details
// ng generate component components/apply-job

// Generate services
// ng generate service services/job

// Job model (job.model.ts)
export interface Job {
  id: number;
  title: string;
  company: string;
  location: string;
  description: string;
}

// Job service (job.service.ts)
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Job } from '../models/job.model';

@Injectable({ providedIn: 'root' })
export class JobService {
  private apiUrl = 'http://localhost:8080/api/jobs';

  constructor(private http: HttpClient) {}

  getJobs(): Observable<Job[]> {
    return this.http.get<Job[]>(this.apiUrl);
  }
}

// Job listing component (job-listing.component.ts)
import { Component, OnInit } from '@angular/core';
import { JobService } from '../../services/job.service';
import { Job } from '../../models/job.model';

@Component({
  selector: 'app-job-listing',
  templateUrl: './job-listing.component.html'
})
export class JobListingComponent implements OnInit {
  jobs: Job[] = [];

  constructor(private jobService: JobService) {}

  ngOnInit() {
    this.jobService.getJobs().subscribe(data => this.jobs = data);
  }
}

// Job listing component HTML (job-listing.component.html)
/*
<div class="container">
  <h2>Job Listings</h2>
  <div *ngFor="let job of jobs" class="card">
    <div class="card-body">
      <h5>{{ job.title }}</h5>
      <p>{{ job.company }} - {{ job.location }}</p>
      <p>{{ job.description }}</p>
      <button class="btn btn-primary">Apply</button>
    </div>
  </div>
</div>
*/

// Run the Angular project
// ng serve --open

// 3. Push the project to GitHub
// ------------------------------

// Initialize Git and push the project
// git init
// git add .
// git commit -m "Initial commit"
// git branch -M main
// git remote add origin https://github.com/your-username/job-portal.git
// git push -u origin main
